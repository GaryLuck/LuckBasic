'---script created on 11-08-2022 14:51:59 by 
' LuckBasic
' This is my personal project to build a Basic interpreter.
' It's a high level project to prove to myself that i understand how to build an interpreter.
' I'm intentionaly using very simple algorithms and data structures. Readability outweighs performance.
' 
' Gary Luckenbaugh - fall of '22
'



uses "console"
uses "file"

dim buff as string
dim buff_after_parse_or as string

dim pc as integer ' Program counter for interpreter

const ops = 10
dim op(ops) as string
dim pTree as Dword


op(1) = "+", "-", "*", "/", "(", ")", "=", "^", "@", ","
buff = ""

' this is a brain dead way to store program lines,
' but without a good collection class I am doing this.

dim statement(5000) as string
dim i as integer

dim at_array(5000) as integer

for i = 1 to 5000
   at_array(i) = 2*i  ' test pattern
next i

for i = 1 to 5000
   statement(i) = ""
next i

function myucase(s as string) as string
    dim c(100) as string
    dim flag as integer
    
    dim i as integer
    dim collect as string
    flag = true
    collect = ""
    for i = 1 to len(s)
        c(i) = mid$(s, i, 1)
'        console_writeline("character and code = " + c(i) + "  code = ", asc(c(i)))
        if asc(c(i)) = 0x22 then ' toggle flag
'            console_writeline("Toggling flag at "+i)
            
            if flag = true then
                flag = false
            else
                flag = true
            end if
        end if
        if flag = true then
            c(i) = Ucase$(c(i))
        endif
'        console_writeline("character and code = " + c(i) + "  code = ", asc(c(i)))
    next i
    
    for i = 1 to len(s)
        
        collect = collect + c(i)
    next i
    
    myucase = collect
    
End function
  
Function tbmain()
  dim i as string
  dim j as String
  dim continue as integer
  
  dim tok as string
  
  start_variable_store()
  
  continue = true
  
  do while continue = true
      console_write("Basic> ")
      
      i = console_read()
      i = rid_eol(i)
      i = myucase(i)
'      i = Ucase$(i)
'      console_writeline(i)
      
      buff = i
      
      tok = gettok()

      if left$(tok, 1) >= "0" and left$(tok, 1) <= "9" then
  
         process_line(i)

      elseif tok <> "BYE" then
      
         do_command(i)
          
      elseif tok = "BYE" then
          continue = false
          
      end if
      
  loop
 
   Release_variable_store()

  TbMain = true

end function

sub edit_delete(linenum as string)
'  console_writeline("deleting " + linenum)
  statement(val(linenum)) = ""
end sub

sub edit_replace(linenum, buff as string)
'    Console_writeline("linenum = "+linenum)
'    console_writeline( "     buff = "+buff)
    statement(val(linenum)) = buff
end sub

sub process_line(i as string)
    dim line_tok as string
    dim nexttok as string
    buff = i
    
    line_tok = gettok()
    nexttok = gettok()
    if nexttok = "~" then
        edit_delete(line_tok)
    else
       edit_replace(line_tok, nexttok + buff)
    end if
    
end sub

function do_command(cmd as string) as integer

   if cmd = "LIST" then
   
      do_list()
    
  elseif left$(cmd, 5) = "PRINT" then
  
     console_writeline(Val(Expr_eval(mid$(cmd, 6))))
     buff = buff_after_parse_or ' look for extraneous stuff
     if gettok() <> "~" then
         console_writeline("warning: extra stuff after expression")
      end if

  elseif left$(cmd, 3) = "LET" then
  
      do_let(cmd)
     buff = buff_after_parse_or ' look for extraneous stuff
     if gettok() <> "~" then
         console_writeline("warning: extra stuff after expression")
      end if
       
      
      
  elseif cmd = "NEW"then
    
       do_new()
       
  elseif left$(cmd, 4) = "LOAD" then
    
        do_load(trim$(mid$(cmd, 5)))
        
  Elseif left$(cmd, 4) = "SAVE" then
  
        do_save(trim$(mid$(cmd, 5)))
  
  elseif cmd = "RUN" then
  
        do_run()
        
  else
    
       do_let("LET"+cmd)
       buff = buff_after_parse_or ' look for extraneous stuff
       if gettok() <> "~" then
         console_writeline("warning: extra stuff after expression")
       end if
       
    end if
  
end function

sub do_load(fname as string)

   dim sbuffer as string
   dim InFileChannel as long
   
   do_new()
   
  InFileChannel   = file_open(fname  , "INPUT" ) 
  
'  console_writeline(InFileChannel)
  if InfileChannel = 0 then
     console_writeline(fname + " not found")
     exit sub
  end if

  do while not file_eof(InFileChannel)
    sBuffer = file_lineinput(InFileChannel)
    process_line(sbuffer)
  loop
  
  file_close(InFileChannel)
   
end sub

sub do_save(fname as string)
  dim OutFileChannel as long

  OutFileChannel  = file_open(fname, "OUTPUT") 
  
  if OutFileChannel = 0 then
     console_writeline(fname + " not writeable")
     exit sub
  end if
  
  for i = 1 to 5000
  
      if statement(i) <> "" then
        File_lineprint(OutFileChannel, Format$(i) + " " + statement(i))
      end if
      
  next i

   file_close(OutFileChannel)
   
end sub
    

sub do_new()

    for i = 1 to 5000
       statement(i) = ""
    next i

end sub

Sub do_list()

  for i = 1 to 5000
  
      if statement(i) <> "" then
        console_writeline(format$(i) + " " +statement(i))
      end if
      
  next i
  
End Sub

' UDTs don't seem to be working, so I'm doing this instead

dim acvar(100) as string
dim aistart(100) as integer
dim ailast(100) as integer
dim aistep(100) as integer
dim ailine(100) as integer

dim for_stackp as integer


sub do_run()

   dim startpc as integer
   dim stoprun as integer
   dim cmd as string
   dim target as integer
   
   startpc = 0
   for_stackp = 0
   stoprun = false
   

   
   for pc = 1 to 5000
   
      if statement(pc) <> "" then
          startpc = pc
          exit for
      end if
      
   next pc
  
  if startpc = 0 then
      Console_writeline("No statements in buffer!")
      exit sub
  end if
  
  'statement(5000) = "END"
  pc = startpc
   
  do while not stoprun and pc <> 0
  
      cmd = statement(pc)
      
      if left$(cmd, 3) = "LET" then
         do_let(cmd)
         buff = buff_after_parse_or ' look for extraneous stuff
         if gettok() <> "~" then
             console_writeline("warning: extra stuff after LET expression on line " +pc)
             
          end if
 
      elseif left$(cmd, 5) = "PRINT" then
          do_print(cmd)
      elseif left$(cmd, 4) = "GOTO" then
          pc = do_goto(cmd) - 1
      elseif cmd = "END" or cmd = "STOP" then
          stoprun = true
      elseif left$(cmd, 2) = "IF" then
          target = do_if(cmd)

          if target <> 0 then 
              pc = target - 1

          end if
      elseif left$(cmd, 5) = "INPUT" then
          do_input(cmd)
      Elseif left$(cmd, 3) = "FOR" then
          do_for(cmd)
      elseif left$(cmd, 4) = "NEXT" then
          do_next(cmd)
      else
         cmd = "LET" + cmd
         do_let(cmd)
'         console_writeline("Don't know " + cmd)
      end if

      if left$(cmd, 4) <> "NEXT" then
          pc = next_pc(pc)
      end if

      
'      console_writeline("Next PC is "+pc)

  loop
  
end sub

sub do_print(cmd as string)

    dim tok as string
    dim comma_last as integer
    
    comma_last = false

    buff = mid$(cmd, 6)
    
    tok = gettok()

    if tok = "~" then
         console_writeline("")
         Exit sub
    end if
    
    do while tok<> "~" 

      comma_last = false

      if lefT$(tok, 1) = chr$(0x22) then
          tok = mid$(tok, 2, len(tok) - 2)
          console_write(tok + " ")
          
          tok = gettok()
          
          if tok = "," then
             tok = gettok()
             comma_last = true
          end if
          
      else
          console_write(Expr_eval(tok + buff) + " ")
          buff = buff_after_parse_or
          
          tok = gettok()
          
          if tok = "," then
              tok = gettok()
              comma_last = true
          endif
          
      end if
    loop
    
    if not comma_last then
        console_writeline("")
    end if
  
  
end sub

function do_if(cmd as string) as integer
  Dim b as integer
  dim linenum as integer
  
  b = val(Expr_eval(mid$(cmd, 3)))
  buff = buff_after_parse_or ' look for extraneous stuff
  if gettok() <> "THEN" then
         console_writeline("warning: THEN not found right after expression end on line " + pc)
  end if

  i = instr(1, cmd, "THEN")
  
  if i <> 0 then
      linenum = val(mid$(cmd, i + 4))
'      console_writeline("if target is " + linenum)
  else
      console_writeline("malformed command is  :" + cmd + ":   missing THEN")
      linenum = 0
  end if
  
  if b then
     do_if = linenum
  else 
     do_if = 0 
  end if
  
end function



sub do_for(cmd as string)

    cmd = mid$(cmd, 4)
    buff = cmd
    
    dim cvar as string
    
    dim tok as string
    
    cvar = gettok()
    
    if gettok() <> "=" then
        console_writeline("Missing = in FOR statment on line "+pc)
        exit sub
    endif
    
    dim istart as integer
    dim ilast as integer
    dim istep as integer
    
    istart = Val(Expr_eval(buff))
    
    buff = buff_after_parse_or
    
    if gettok() <> "TO" then
        Console_writeline("Missing TO in FOR on line "+pc)
        exit sub
    end if
    
    ilast = Val(Expr_eval(buff))
    
    buff = buff_after_parse_or
    
    istep = 1
    
    if gettok() = "STEP" then
    
       istep = VAL(Expr_eval(buff))
       
    end if
    
    buff = buff_after_parse_or
    
    if gettok() <> "~" then
    
        console_writeline("Extraneous stuff after STEP value on line " +pc)
        
    endif
    
'    console_writeline("var = "+cvar)
 '   Console_writeline("start is " + istart)
'    Console_writeline("last is " + ilast)
'    Console_writeline("step = "+ istep)
    
    for_stackp = for_stackp + 1 
    
    acvar(for_stackp) = cvar
    aistart(for_stackp) = istart
    ailast(for_stackp) = ilast
    aistep(for_stackp) = istep
    ailine(for_stackp) = pc
    
    Set_variable(cvar, format$(istart))
    
'    console_writeline("FOR " + cvar + "  for_stackp = "+ for_stackp)
    

    
end sub
  
sub do_next(cmd as string)
'  console_writeline(cmd)
'  console_writeline("NEXT " + " for_stackp "  + for_stackp)

  if for_stackp >= 1 then
'    console_writeline("NEXT "+acvar(for_stackp))
'     console_writeline(aistart(for_stackp))
'    console_writeline(ailast(for_stackp))
'    console_writeline(aistep(for_stackp))
'    console_writeline(ailine(for_stackp))

  else
    console_writeline("stack underflow NEXT without FOR on line "+pc)
      pc = next_pc(pc)
    exit sub
  end if
    cmd = mid$(cmd, 5)
    
    buff = cmd
    
    dim controlvariable as string
    
    controlvariable = gettok()
    
'    console_writeline("control variable for NEXT is "+ controlvariable)
'    console_writeline("control variable on stack is "+acvar(for_stackp))
    if controlvariable <> acvar(for_stackp) then
        console_writeline("mismatched next on line "+pc)
    endif
    
    
    dim var as string
    dim start as integer
    dim last as integer
    dim istep as integer
    dim iline as integer
    
    

    start = aistart(for_stackp)
    last = ailast(for_stackp)
    istep = aistep(for_stackp)
    iline = ailine(for_stackp)

    
    var = acvar(for_stackp) 
    dim v as integer
    v = val(Get_variable(var))
    
    v = v + istep
    
    if istep >= 0 then
        if v > last then
   '     console_writeline("popping "+ "var = "+var)
            pc = next_pc(pc) 
            for_stackp = for_stackp - 1
            if for_stackp > 0 then
'                console_writeline("  pc is now "+pc)
'                console_writeline("  for_stackp is "+for_stackp)
'                console_writeline("   control variable will now be "+ acvar(for_stackp))
            else
'                console_writeline("End of loops")
            endif
        else
            pc = next_pc(iline)
        end if
    else
        if v < last then
            pc = next_pc(pc)
        else
            pc = next_pc(iline)
        end if
    end if
    
    Set_variable(var, format$(v))

  
end sub

function next_pc(pc as integer) as integer
'  console_writeline("look for next statment after "+pc)
  for i = pc + 1 to 5000
  
    if statement(i) <> "" then
        next_pc = i
        exit function
    end if
  
  next i
  
  next_pc = 0
    
end Function

function do_goto(cmd as string) as integer
  do_goto = val(mid$(cmd, 5))
end function

sub do_let(cmd as string)

   dim var as string
   dim firstchar as string
'  console_writeline("cmd = "+cmd)

      buff = mid$(cmd, 4)
      var = gettok()
'       console_writeline("buff = '" + buff+ "'  " + "var ="+var)
      if var = "@" then
          do_let_at_array(buff)
          exit sub
      end if
      
      firstchar = left$(var, 1)
      if not (firstchar >= "A" and firstchar <= "Z") then
      
          console_writeline("Variable name must follow LET")
          exit sub
          
      elseif gettok() <> "=" then
      
          Console_writeline("Missing '=' in LET  " + cmd)
          exit sub
          
      end if
  
      Set_variable(var, Expr_eval(buff))

end sub

sub do_let_at_array(e as string)

' There be lots of demons here that usually happen in C, but not Basic.
' I am going to disallow the use of the logical = symbol on the left side of
' a LET command.  This will disallow statements like LET @((1=2)+10) = 3.  The first
' equal sign is for logical equivalence where the second is for assignment.
 
'  dim i as integer
  dim leftstr as string
  dim rightstr as string
  
  dim leftval as integer
  dim rightval as integer
  
  dim rpn as string
  
'  console_writeline("e is  "+e)
'  i = instr(1, e, "=")
'  console_writeline("i is  "+i)
'  if i = 0 then
 '     console_writeline("No assignment operator in let for @ array")
'      exit sub
'  end if
  
'  leftstr = mid$(e, 1, i-1)
'  rightstr = mid$(e, i+1)
  
'  console_writeline("left str is "+leftstr)
'  console_writeline("right str is "+rightstr)

'   leftval = val(Expr_eval(leftstr))
   
'   console_writeline("leftstr is "+leftstr+"leftval is "+leftval)
'   rightval = val(Expr_eval(rightstr))
   
'   console_writeline("left is "+leftval+" and right is "+rightval)

  buff = e
  if gettok() <> "(" then
      console_writeline("an open left paren ( must follow @ in let")
      exit sub
  endif
  
  rpn = parse_or()
  
  if gettok() <> ")" then
      console_writeline("missing right paren ) in LET @")
      exit sub
  end if
  
  buff_after_parse_or = buff

  leftval = val(Eval_rpn(rpn))
  
  buff = buff_after_parse_or
  
  If gettok() <> "=" then
      Console_writeline("missing = in LET @")
      exit sub
  end if
  
  rightval = Val(Eval_rpn(parse_or()))
  
'  console_writeline("leftval = "+leftval)
  
  if not (leftval >= 1 and leftval <= 5000) then
      console_writeline("subscript out of bounds on left side of assignment is "+leftval)
      exit sub
  end if

  at_array(leftval) = Format$(rightval)
  
end sub

sub do_input(cmd as string)

   dim var as string
   dim firstchar as string
'  console_writeline("cmd = "+cmd)

      buff = mid$(cmd, 6)
      var = gettok()
'      console_writeline("buff = '" + buff+ "'  " + "var ="+var)
      if var = "@" then
          do_input_at_array(buff)
          exit sub
      end if
      
      firstchar = left$(var, 1)
      if not (firstchar >= "A" and firstchar <= "Z") then
          console_writeline("Variable name must follow INPUT")
          exit sub
      end if
          
      dim user_input as string
      
      user_input = console_read()
  
      var = Trim$(Remove$(var, $CRLF))
      Set_variable(var, Expr_eval(user_input))

end sub

sub do_input_at_array(e as string)

' There be lots of demons here that usually happen in C, but not Basic.
' I am going to disallow the use of the logical = symbol on the left side of
' a LET command.  This will disallow statements like LET @((1=2)+10) = 3.  The first
' equal sign is for logical equivalence where the second is for assignment.
 
'  dim i as integer

  dim user_input as string
  
  dim subval as integer
  dim inpval as integer
  
  dim rpn as string

  buff = e
  if gettok() <> "(" then
      console_writeline("an open left paren ( must follow @ in INPUT")
      exit sub
  endif
  
  rpn = parse_or()
  
  if gettok() <> ")" then
      console_writeline("missing right paren ) in INPUT @")
      exit sub
  end if
  
  subval = val(Eval_rpn(rpn))
  
  user_input = console_read()
  
  inpval = Val(Expr_eval(user_input))
  
  if not (subval >= 1 and subval <= 5000) then
      console_writeline("subscript out of bounds on left side of INPUT @ is " + subval)
      exit sub
  end if

  at_array(subval) = Format$(inpval)
  
end sub

Function Eval_rpn(rpn as string) as string

  buff = rpn
  dim tok as string
  
  clearstack()
  tok = gettok()
  
  if tok = "~" then
    Eval_rpn = "0"
    exit function
  end if
  
  do while tok<> "~"
'     console_writeline("Doing tok "+tok)
      process_tok(tok)
    tok = gettok()
  loop
  
  dim r as string
  r = mypop()
'  console_writeline("result is "+r)
  Eval_rpn = format$(r)
  
  End Function
  
  

function Expr_eval(e as string) as string

  clearstack()

  buff = e
  buff = parse_or()
'  console_writeline("RPN = " + buff + " after parse_or")
  dim tok as string

  tok = gettok()
  
  if tok = "~" then
    Expr_eval = "0"
    exit function
  end if
  
  do while tok<> "~"
'     console_writeline("Doing tok "+tok)
      process_tok(tok)
    tok = gettok()
  loop
  dim r as integer
  r = mypop()
'  console_writeline("result is "+r)
  Expr_eval = format$(r)

End function

sub process_tok(tok as string)
    dim i as integer

    if tok = "UNM" then
        mypush(Format$(-val(mypop())))
        exit sub
    end if
    
    if tok = "GETAT" then
'        mypush(Format$(val(at_array(mypop()))))
        i = mypop()
        if i < 1 or i > 5000 then
            console_writeline("Subscript out of range 1..5000 for " + i)
            mypush(format$(0))
            Exit Sub
        end if
        
        mypush(format$(at_array(i)))
        
        exit sub
    end if
    
    for i = 1 to ops
        if op(i) = tok then
          process_op(op(i))
          exit sub
        end if
    next i
    
    dim logical_op(7) as string
    logical_op(1) = "<", "<=", "=", ">", ">=", "AND", "OR"
    
    for i = 1 to 7
        if logical_op(i) = tok then
'          Console_writeline("logical op " + logical_op(i))
          process_op(logical_op(i))
          exit sub
        end if
    next i
 
    process_num_or_var(tok)
    
end sub

sub process_op(op as string)
   dim leftval as integer
   Dim rightval as integer
   dim res as integer
   
   rightval = Val(mypop())
   leftval = Val(mypop())
   
   If op = "+" then
      res = leftval + rightval
   elseif op = "-" then
      res = leftval - rightval
   elseif op = "*" then
      res = leftval*rightval
   elseif op = "/" then
      res = leftval/rightval
   elseif op = "^" then
      res = leftval ^ rightval
   elseif op = "<" then
      res = leftval < rightval
   elseif op = "<=" then
      res = leftval <= rightval
   elseif op = "=" then
'         console_writeline("= "+leftval+" "+rightval)
      res = leftval = rightval
   elseif op = ">" then
      res = leftval > rightval
   elseif op = ">=" then
      res = leftval >= rightval
   elseif op = "AND" then
'      console_writeline("and "+leftval+" "+rightval)
      res = leftval and rightval
   elseif op = "OR" then
      res = leftval or rightval
    else
       Console_writeline("Not an operator")
       exit sub
    End if
    
    mypush(format$(res))
    
end sub

sub process_num_or_var(num as string)
    if left$(num, 1) >= "0" and left$(num,1) <= "9" then

      mypush(num)
    else
      mypush(Get_variable(num))
    end if
end sub

dim mystack(50) as string
dim sp as integer

Sub clearstack()
    sp = 1
end sub

Sub mypush(tok as string)
  ' console_writeline("push " + tok)
   mystack(sp) = tok
   sp = sp + 1
end sub

Function mypop() as string
  sp = sp - 1
  ' console_writeline("pop sp = "+sp + "tok = " + mystack(sp))
  mypop = mystack(sp)
end function 

' There must be an API for this, but for now this will work
' Found the API, but my function calls the API

Function rid_eol(inp as string) as string
'  rid_eol = mid$(inp, 1, len(inp)-2)
  rid_eol = Remove$(inp, $CRLF)
end function

function Start_variable_store()
   pTree = Tree_New
End Function

Function Set_variable(key as string, item as string)
   Tree_Set(pTree, key, item)
End Function

Function Get_variable(key as string) as string  
    Get_variable = Tree_Get(pTree, key)
end function

function Release_variable_store()
    Tree_Free(pTree)
End Function


' here we go, the gettok function is the so-called lexical scanner.

function gettok() as string
    dim collect as string
    dim b as string
    dim b1 as string
    dim i as integer
    
    do while left$(buff, 1) = " "
        buff = mid$(buff, 2)
    loop
    
    if buff = "" then
        gettok = "~"
        exit function
    end if
    
    collect = ""

    b = left$(buff,1)
    b1 = mid$(buff, 2, 1)
    
    if b = "<" and b1 = "=" then
        buff = mid$(buff, 3)
        gettok = b + b1
        exit function
    end if
    
    if b = "<" and b1 = ">" then
        buff = mid$(buff, 3)
        gettok = b + b1
        exit function
    end if
    
    if b = "<" then
        buff = mid$(buff, 2)
        gettok = b
        exit function
    end if
    
    if b = ">" and b1 = "=" then
        buff = mid$(buff, 3)
        gettok = b + b1
        exit function
    end if
    
    if b = ">" then
        buff = mid$(buff, 2)
        gettok = b
        exit function
    end if
    
    for i = 1 to ops
        if b = op(i) then
            gettok = b
            buff = mid$(buff, 2)
            exit function
        end if
    next i
    
    if b >="A" and b <= "Z" then
        do while b >= "A" and b <= "Z" or b >= "0" and b <= "9"
            collect = collect + b
            buff = mid$(buff, 2)
            b = left$(buff, 1)
        loop
        gettok = collect
        exit function
    end if
    
    if b >= "0" and b <= "9" then
        do while b >= "0" and b <= "9"
            collect = collect + b
            buff = mid$(buff, 2)
            b = left$(buff, 1)
        loop
        gettok = collect
'        console_writeline("number token is " + collect)
        exit function
    end if
    
    if asc(b) = 0x22 then ' quote mark
        collect = b
        buff = mid$(buff, 2)
        b = left$(buff, 1)
        do while Asc(b) <> 0x22
            collect = collect + b
            buff = mid$(buff, 2)
            b = left$(buff, 1)
        loop
        gettok = collect + chr$(0x22)
        buff = mid$(buff, 2)
        
'        console_writeline("text token is " + collect + chr$(0x22))
        
        exit function
    end if
    
    gettok = "~":  rem end of file token
    
end function

' The remainder of the program constitutes a recursive descent parser.  Each function can be
' viewed as a production in a context free grammar.  A CFG is a grammar where you can predict what
' is coming based on looking at the next symbol.  High precedence operators appear first in the function
' list.  as you read down the code, you'll see lower and lower precedence operators.

' A factor is a high precedence bundle of tokens. An identier, a number, a parenthesized expression,
' or a unary minus followed by an expression. you will see tok, and rpn in all the following functions. 
' each function returns the rpn of the converted expression fragment.  


function parse_factor() as string
    dim tok as string
    dim rpn as string
'    console_writeline("Enter parse_factor with buff = '" + buff +"'")
    tok = gettok()

    if tok= "(" then
        
        rpn = parse_or()
        tok = gettok()
        
        if tok <> ")" then
            console_writeline("Missing ) before "+buff)
            buff = ""
            parse_factor = "~"
            exit function
        end if
        parse_factor = rpn
        exit function
    end if
    
    if tok = "@" then
    
        tok = gettok()
    
        if tok <> "(" then
            console_writeline("Error in let atsign")
            buff = ""
            parse_factor = "~"
            exit function
        end if
        
        rpn = parse_or()
        
        tok = gettok()
        
        if tok <> ")" then
            console_writeline("Missing ) before "+buff)
            buff = ""
            parse_factor = "~"
            exit function
        end if
  ' console_writeline("@ evaluated to "+rpn+"GETAT")
        parse_factor = rpn + "GETAT "
        Exit Function
        

 
    end if
    
    if tok = "-" then ' I think this is uneccesary after review
        rpn = parse_or()
        parse_factor = rpn + "UNM "
        exit function
    end if
    
'    console_writeline("token added to rpn is " + tok + " ")
    rpn = tok + " "
    parse_factor = rpn
'    console_writeline("Exit parse_factor with buff = '" + buff +"'")
end function

function parse_exponent() as string
    dim tok as string
    dim rpn as string
    
    rpn = parse_factor()
    tok = gettok()

    do while tok = "^"
        rpn = rpn + parse_exponent () + tok
        tok = gettok()
    loop

    buff = tok + " " + buff
    parse_exponent = rpn    
end function

' parse a unary minus which has less precedence than exponentiation
' that's why unary - is checked here before exponential expressions above
'
' in the rpn we use a separate designation for unary minus (UNM)
' this makes it easy for the vm to understand the different
' interpretations


function parse_unary_minus() as string
    dim tok as string
    dim rpn as string
    dim neg as integer
    
    neg = false
    
    tok = gettok()
    do while tok = "-" or tok = "+"
        if tok = "-" then
            if neg = false then
                neg = true
            elseif neg = true then
                neg = false
            end if
        end if
        tok = gettok()
    loop
    
    buff = tok + " " + buff
    
    rpn = parse_exponent()
    
    if neg = true then
        rpn = rpn + "UNM "
    end if
    
    parse_unary_minus = rpn
    
end function

function parse_term ()as string
    dim tok as string
    dim rpn as string
    
    rpn = parse_unary_minus()
    tok = gettok()
    
    do while tok = "*" or tok = "/"
        rpn = rpn + parse_unary_minus() + tok
        tok = gettok()
    loop
    
    buff = tok + " " + buff
    parse_term = rpn
    
end function



function parse_expr () as string
    dim tok as string
    dim rpn as string
    
    rpn = parse_term()
    tok = gettok()
    
    do while tok = "+" or tok = "-"
        rpn = rpn + parse_term() + tok
        tok = gettok()
    loop
    
    buff = tok + " " + buff
    
    parse_expr = rpn
    
end function

function parse_condition () as string
    dim tok as string
    dim rpn as string
    
    rpn = parse_expr()
    tok = gettok()
    
    if left$(tok, 1) = "=" or left$(tok, 1) = ">" or left$(tok, 1) = "<" then
        rpn = rpn + parse_expr() + tok
        tok = gettok()
    end if
    
    buff = tok + " " + buff
    parse_condition = rpn
    
end function

function parse_and () as string
    dim tok as string
    dim rpn as string
    
    rpn = parse_condition()
    tok = gettok()
    
    do while tok = "AND"
        rpn = rpn + parse_condition() + tok + " "
        tok = gettok()
    loop
    
    buff = tok + " " + buff
    parse_and = rpn
    
end function

function parse_or () as string
    dim tok as string
    dim rpn as string
'    console_writeline("Entering parse_or with buff = " + buff)
    rpn = parse_and()

    tok = gettok()
    
    do while tok = "OR"
        rpn = rpn + parse_and() + tok + " "
        tok = gettok()
    loop
    
    buff = tok + " " + buff
    parse_or = rpn
    
    buff_after_parse_or = buff
    
'    console_writeline("Leaving parse_or with buff = " + buff)
    
end function
 